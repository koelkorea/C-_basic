// 캡슐화(Encapsulation)
//  : 객체의 속성(data)과 행위(methods)를 하나로 묶는 행위 (= 클래스 설계)
//     -> (중요) 이 과정에서 공개할 멤버와 숨길 멤버를 정해둘 수 있음 (= 은닉화) 

// 은닉화(Information hiding)
//  : class의 실제 구현 내용을 접근제어자를 통해 접근제어 권한에 차등을 둬서 외부에 숨기는 개념
//    -> (중요) 은닉화는 캡슐화를 구현하는 과정에 포함된 부분기능 같은 개념이라 생각하면 됨 ( 캡슐화 > 은닉화 )


//   # 접근제어자
//      : 클래스의 멤버변수의 변조 방지를 위해 코드 실행 중 접근위치에 따라 멤버변수의 값에 접근여부에 따른 제어권한을 의미 
//         -> 사실상 public과 private만 널리 사용되며, 이들이 getter setter 디자인패턴과 연관 
        
//        - private     : 해당 클래스 내에서만 해당 클래스의 멤버들에 접근할 수 있음 
//                        (= 오로지 클래스 선언시 미리 작성한 멤버변수 초기화 값과 멤버함수를 통해서만 값의 변조가 가능 == 은닉이 필요한 속성에 적용하게 됨)
//      
//        - protected   : 상속관계에서 해당 클래스의 멤버들에 접근허용 
//                        (= 해당 클래스와 상속관계에 있는 클래스가 선언될 때라면, 해당 멤버변수의 값에 접근 및 변조나 멤버함수의 사용이 가능) 
//      
//        - public      : 어디서든 일단 멤버변수나 멤버메서드가 호출되거나 참조되면, 언제라도 해당 멤버변수의 값에 접근 및 변조나 멤버함수의 사용을 허용함 (사실상 자동문임)
        
//   # getter, setter 디자인 패턴
//      : 접근제어자를 통해 class의 멤버변수의 값에 접근 및 변조나

//   # setter, getter = private 접근제어자를 통한 은닉화
//      : 클래스 멤버 변수를 외부에서 직접 수정 할 수 없으며, 멤버 함수로만 수정 하도록 만드는 방법으로 외부에서 접근을 막을 수 있다


//특징
//외부 객체는 객체 내부의 구조를 얻지 못한다
//객체가 노출해서 제공하는 필드와 메소드만 이용할 수 있다
//외부의 잘못된 사용으로 인해 객체가 손상되지 않도록 캡슐화하여 보호
//은닉과 노출은 접근제어 지시자로 분류
//클래스의 구성 범위를 어디까지 정의할 것인가 ?



