// 생성자(Constructor)
//  : 객체의 [생성]과 동시에 호출하는 '클래스명'과 동일한 이름의 함수


// 소멸자(Destructor)
//  : 객체의 [소멸]과 동시에 호출되는'~클래스명'이란 이름의 함수

//   # 생성자 & 소멸자 특징
//     1. 함수 선언에 return값이 X
//     2. 생성자는 객체 생성시 딱 한번 호출
//     3. 생성자는 오버로딩(Overloading) 가능함
//     4. Default 가능
//     5. 클래스의 각 멤버가 선언된 순서대로 초기화 됨
//     6. 생성자 뒤에 콜론을 사용해서 각 멤버를 초기화 할 수 있음 
//         -> (주의) 일반 멤버함수에서는 사용 X
//     7. 생성자, 소멸자는 정의하지 않으면 자동으로 생성
//     8. 디폴트 생성자, 소멸자는 빈 껍데기만 존재
//     9. (중요!) 객체의 유효범위 = 지역변수의 유효범위 
//         -> 블록이 끝나면 메모리 상에서 소멸됨 의미


//   # 생성자 VS 소멸자 정리

//     |           | 생성자                            |    소멸자
//     | ----------|----------------------------------|-------------------  
//     | 호출시기   | 객체 생성시 1번만                 | 객체 소멸 시
//     | 함수명     | 클래스명                          |  ~클래스명
//     | 리턴값     | X                                | X
//     | 매개변수   | O (0-N개 = 생성자 오버로딩 가능)   | X (= 오직 1개만 존재)
//     | 활용       | CLASS의 멤버변수 초기화 시        | 동적 메모리 해제 시
//     | ---------  |----------------------------------|--------------------


//변수(객체) 선언(생성)
//point pos_1; // 객체 생성
//point* ptr_pos_1 = new point; //동적할당
//
//생성자 변수 선언
//point pos_1(1, 1); // 객체 생성
//point* ptr_pos_1 = new point(1, 1); //동적할당
//
//일반적인 초기화 방법
//A(int _a, double _d, char _c)
//{
//	a = _a;
//	d = _d;
//	c = _c;
//}
//콜론(:)을 이용한 초기화 방법
//A(int _a, double _d, char _c) : a(_a), d(_d), c(_c)
//{
//}

