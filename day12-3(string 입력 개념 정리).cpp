// string 클래스
//  : 그 동안 char[] 형식으로 접근하느라 ㅈㄹ맞게 까다로웠던, 문자열을 본격적으로 객체로 사용하기 위해 제작된 namespace std 안의 class 타입
//     -> 단! char 배열을 사용하는 근본 자체는 변하지는 않는게, 멤버변수인 allocator class객체가 기존 char*를 사용한 동적배열 방식의 메모리 동적할당 및 해제를 해주기 때문


//   #  C언어와 C++에서 문자열을 저장하는 자료형
// 
//      - C언어 char 사용
//         : char 변수명[숫자] = "문자열 상수(\0)"  or '문자 상수 값'
// 
//           ex) char str1[15] = "Hello World!(\0)"      <- 거의 null문자가 세트로 붙음
//               char str2[15] = 'Hello World!'

//      - C++는 string 사용
//         : string 변수명("문자열 상수")  or  string 변수명 = "문자열 상수";
// 
//           ex) string str1("Hello World!");         <- 파라미터로 입력하는 법
//               str2 = "Hello World!";               <- 직접 문자열 값 대입하는 법


//   #  C++의 string 클래스의 멤버구조 해체
//      : 간단히 말해, C++에서 개별 string객체는 자신이 위치한 문자열 포인터값과 거기 저장된 문자열의 갯수 및 크기가 얼만지에 대한 정보를 제공함
//        (= 그러니까 string 객체가 직접 문자열 값을 저장하는게 아니라, 객체가 가진 데이터는 문자열을 추출하기 위한 일종의 metadata라 생각하면 편함) 
// 
//      ---------------------------------------------------------------------------------------------------------
//         #include <string>

//         namespace std {                        <- (중요!) 그 입/출력 관련 비트연산자를 사용하는 cin, cout 객체와 같은 namespace에 위치
//          
//             class string {
//                 unsigned __int64 size;         <- 멤버변수1 : size      (= 저장 가능 문자열의 개수 -> 2^64개)
//                 unsigned __int64 capacity;     <- 멤버변수2 : capacity  (= 저장 가능 총 용량 크기 -> 2^64 byte)
//                 allocator<char> allocator;     <- 멤버변수2 : allocator (= 문자열 배열에 대한 메모리 할당 및 해제를 관리하는 class객체)
//             };
//         }
//      ---------------------------------------------------------------------------------------------------------


//   # C언어와 C++에서 문자열을 입력하는 방법차이

//      - C언어 : char 배열 사용한 문자열 입력 (= 기본적으로는 정적할당)

//         1. cin과 비트연산자 사용한 입력 

//            ex) char name[15];                      <-  최대 14(+'\0')개 저장 가능 (입력 stream 버퍼에는 '\n' 남아있음)
//                cin >> name; 
//                while (cin.get() != '\n');

//         2. cin.get(char포인터변수명, 배열크기n) 
//             : char배열명에 해당하는 시작위치에 위치한 n크기 만큼의 배열에 문자열을 입력하면 '\n'까지를 기준으로 1행으로 입력받음 
//                -> (중요!) 단, 그러고 난뒤 입력 stream 버퍼에는 '\n' 남아있음

//                   ex) cin.get(name, 15);               <-  최대 14(+'\0')개 저장 가능 (입력 stream 버퍼에는 '\n' 남아있음)

//         3. cin.getline(char포인터변수명, 배열크기n, '구분자' = '\n') 
//             : char배열명에 해당하는 시작위치에 위치한 n크기 만큼의 배열에 문자열을 입력하면, 구분자(기본 parameter = '\n')에 해당하는 문자까지만 1행으로 입력받음
//                -> getline 특성
//                    a. 입력 stream 버퍼에 남은 '\n'이나 '구분자'도 같이 없어짐  
//                        <-> 단! 구분자를 입력하면, 그 녀석과 이후 나머지 문자열은 입력버퍼에 남게 됨
//                    b. 구분자의 기본 parameter = '\n'

//               ex) cin.getline(name, 15);           <-  최대 14(+'\0')개 저장 가능 (입력 stream 버퍼에 남은 '\n' 버림)
//                   cin.getline(name, 15, ':');      <-  최대 14(+'\0')개 저장 가능 (입력 stream 버퍼에 남은 ':' 버리지만, 그 이후 문자들이 남아있음)


//      - C++ :  string class를 통한 문자열 입력 (= 동적할당이 기본)

//         1. cin과 비트연산자 사용한 입력 

//            ex) string fullname;
//                cin >> fullname;                    <- 동적할당 된 문자열객체라 크기는 2^64자 까지.. 빈공간도 입력되며, '\n'까지를 기준으로 1행으로 입력받음 (입력 stream 버퍼에는 '\n' 남아있음)
//                while (cin.get() != '\n');

//         2. getline(cin, string객체명, '구분자' = '\n') 
//             : string객체명에 cin 객체를 사용하여 문자열을 입력하면, 구분자(기본 parameter = '\n')에 해당하는 문자까지만 입력받음
//                -> getline 특성
//                    a. 입력 stream 버퍼에 남은 '\n'은 같이 없어짐  
//                        <-> 단! 구분자를 입력하면, 그 녀석과 이후 나머지 문자열은 입력버퍼에 남게 됨
//                    b. 구분자의 기본 parameter = '\n'

//               ex) getline(cin, fullname);           <-  동동적할당 된 문자열객체라 크기는 2^64자 까지.. 빈공간도 입력되며, '\n'까지를 기준으로 1행으로 입력받음 (입력 stream 버퍼에 남은 '\n' 버림)
//                   getline(cin, fullname, ':');      <-  동동적할당 된 문자열객체라 크기는 2^64자 까지.. 빈공간도 입력되며, ':'까지를 기준으로 1행으로 입력받음 (입력 stream 버퍼에 남은 ':' 버리지만, 그 이후 문자들이 남아있음)